
# b树
B树：https://blog.csdn.net/v_JULY_v/article/details/6530142
 B树： 有序数组+平衡多叉树 （数的结构，树的深度，树的插入和删除）
 B+树：有序数组链表+平衡多叉树；
 B*树：一棵丰满的B+树。
 
引申问题：
  多关键字的B树如何创建？
  数据库中对于B树结构的使用？ 只用于底层磁盘相关的存储？
 
 # 慢sql优化
慢sql优化：
https://tech.meituan.com/mysql-index.html
建索引的几大原则
1.最左前缀匹配原则，非常重要的原则，mysql会一直向右匹配直到遇到范围查询(>、<、between、like)就停止匹配，比如a = 1 and b = 2 and c > 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。
2.=和in可以乱序，比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式
3.尽量选择区分度高的列作为索引,区分度的公式是count(distinct col)/count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条记录
4.索引列不能参与计算，保持列“干净”，比如from_unixtime(create_time) = ’2014-05-29’就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。所以语句应该写成create_time = unix_timestamp(’2014-05-29’);
5.尽量的扩展索引，不要新建索引。比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可

explain：
https://dev.mysql.com/doc/refman/5.5/en/explain-output.html

1 学习查看explain的输入
2 先运行看看是否真的很慢，注意设置SQL_NO_CACHE
3 存储过程，就是利用数据库进行批量插入数据

# Mysql索引结构
https://www.jianshu.com/p/1775b4ff123a



